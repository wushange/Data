package cn.datamining.dat.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property TestUpdate = new Property(1, String.class, "testUpdate", false, "TEST_UPDATE");
        public final static Property UserId = new Property(2, String.class, "userId", false, "USER_ID");
        public final static Property UserName = new Property(3, String.class, "userName", false, "USER_NAME");
        public final static Property NickName = new Property(4, String.class, "nickName", false, "NICK_NAME");
        public final static Property AliasName = new Property(5, String.class, "aliasName", false, "ALIAS_NAME");
        public final static Property UserHead = new Property(6, String.class, "userHead", false, "USER_HEAD");
        public final static Property UserPhone = new Property(7, String.class, "userPhone", false, "USER_PHONE");
        public final static Property UserEmail = new Property(8, String.class, "userEmail", false, "USER_EMAIL");
        public final static Property Birthday = new Property(9, String.class, "birthday", false, "BIRTHDAY");
        public final static Property UserCompany = new Property(10, String.class, "userCompany", false, "USER_COMPANY");
        public final static Property UserPosition = new Property(11, String.class, "userPosition", false, "USER_POSITION");
        public final static Property Version = new Property(12, String.class, "version", false, "VERSION");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"TEST_UPDATE\" TEXT," + // 1: testUpdate
                "\"USER_ID\" TEXT," + // 2: userId
                "\"USER_NAME\" TEXT," + // 3: userName
                "\"NICK_NAME\" TEXT," + // 4: nickName
                "\"ALIAS_NAME\" TEXT," + // 5: aliasName
                "\"USER_HEAD\" TEXT," + // 6: userHead
                "\"USER_PHONE\" TEXT," + // 7: userPhone
                "\"USER_EMAIL\" TEXT," + // 8: userEmail
                "\"BIRTHDAY\" TEXT," + // 9: birthday
                "\"USER_COMPANY\" TEXT," + // 10: userCompany
                "\"USER_POSITION\" TEXT," + // 11: userPosition
                "\"VERSION\" TEXT);"); // 12: version
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String testUpdate = entity.getTestUpdate();
        if (testUpdate != null) {
            stmt.bindString(2, testUpdate);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(4, userName);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(5, nickName);
        }
 
        String aliasName = entity.getAliasName();
        if (aliasName != null) {
            stmt.bindString(6, aliasName);
        }
 
        String userHead = entity.getUserHead();
        if (userHead != null) {
            stmt.bindString(7, userHead);
        }
 
        String userPhone = entity.getUserPhone();
        if (userPhone != null) {
            stmt.bindString(8, userPhone);
        }
 
        String userEmail = entity.getUserEmail();
        if (userEmail != null) {
            stmt.bindString(9, userEmail);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(10, birthday);
        }
 
        String userCompany = entity.getUserCompany();
        if (userCompany != null) {
            stmt.bindString(11, userCompany);
        }
 
        String userPosition = entity.getUserPosition();
        if (userPosition != null) {
            stmt.bindString(12, userPosition);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(13, version);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String testUpdate = entity.getTestUpdate();
        if (testUpdate != null) {
            stmt.bindString(2, testUpdate);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(4, userName);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(5, nickName);
        }
 
        String aliasName = entity.getAliasName();
        if (aliasName != null) {
            stmt.bindString(6, aliasName);
        }
 
        String userHead = entity.getUserHead();
        if (userHead != null) {
            stmt.bindString(7, userHead);
        }
 
        String userPhone = entity.getUserPhone();
        if (userPhone != null) {
            stmt.bindString(8, userPhone);
        }
 
        String userEmail = entity.getUserEmail();
        if (userEmail != null) {
            stmt.bindString(9, userEmail);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(10, birthday);
        }
 
        String userCompany = entity.getUserCompany();
        if (userCompany != null) {
            stmt.bindString(11, userCompany);
        }
 
        String userPosition = entity.getUserPosition();
        if (userPosition != null) {
            stmt.bindString(12, userPosition);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(13, version);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // testUpdate
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // nickName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // aliasName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userHead
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // userPhone
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // userEmail
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // birthday
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // userCompany
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // userPosition
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // version
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setTestUpdate(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNickName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAliasName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserHead(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUserPhone(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUserEmail(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setBirthday(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUserCompany(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUserPosition(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setVersion(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
